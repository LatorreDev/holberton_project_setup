#!/usr/bin/python3

'''
pjs - Sets up Holberton School projects.

Usage: ./pjs

Users are prompted for username, password and project number.
The script generates the appropriate directory and files for each project.
'''

import os
import requests
import getpass
import subprocess
from bs4 import BeautifulSoup


def login(endpoint, token, sesh):
    '''Attempts to log user in using provided credentials + token'''
    user = input('Student ID: ') 
    pw = getpass.getpass('Password: ')
    creds = {
                'authenticity_token': token,
                'user[login]': user,
                'user[password]': pw,
                'user[remember_me]': 1,
                'commit': 'Log in'
            }
    post_response = sesh.post(endpoint, data=creds)
    if len(post_response.text) < 5000:
        '''I'm using the length of the response to determine if login failed.
        A successfully login will take you to the dashboard, which has
        approximately 3x as many characters as the login page.'''
        print('Invalid ID and/or Password. Try again. Exiting...')
        exit()
    elif post_response.status_code == 200:
        p_id = input('Login successful!\nEnter project ID: ')
        get_it = sesh.get('https://intranet.hbtn.io/projects/{}'.format(p_id))
        soup = BeautifulSoup(get_it.text, 'html.parser')
        return soup
    else:
        print('Login failure. Possibly a bad connection.')
        return None


def get_token(soup):
    '''Parses the token from the soup'''
    tags = str(soup.find_all('input'))
    for tag in tags.split('\n')[0].split(','):
        if 'authenticity_token' in tag:
            token = tag.split('=')[3]
            return token[1:] + '=='

def get(soup, field):
    '''Parse the soup and returns the Project title'''
    soup = str(soup.get_text())
    split = soup.split('\n')
    clean_html = []
    for i in range(len(split)):
        if split[i] not in [' ', '\n', '\t', '', '    ']:
            clean_html.append(split[i])
    if field == 'project':
        target = '0x'
    elif field == 'directory':
        target = 'Directory: '
    elif field == 'github_repo':
        target = 'GitHub repository: '
    elif field == 'files':
        target = "File: "
    else:
        target = None
    lines = []
    for line in clean_html:
        if line.startswith(target):
            lines.append(line)
    if lines:
        return lines
    return None

def get_files(list_of_files):
    result = []
    for line in list_of_files:
        f = line.split(': ')[1]
        result.append(f)
    return result

def assemble(project, directory, files):
    '''Creates the files'''
    cwd = os.getcwd()
    if os.path.exists(directory):
        print('Looks like you already have a {} directory.'.format(directory))
        print('Exiting.')
        exit()
    else:
        os.makedirs(directory)
    os.chdir(directory)
    for filename in files:
        print('Creating file: {}'.format(filename))
        with open(filename, 'w', encoding='utf-8') as task:
            task.close()

def make_executable(directory):
    '''Makes all files in the directory executable. Happens before README is
    made.'''
    subprocess.run('chmod u+x *', shell=True)
    print('Done.')
    return

def make_readme(directory):
    '''Makes a README.md file with the project name inside'''
    with open('README.md', 'w', encoding='utf-8') as readme:
        readme.write('##{}\n'.format(directory))
    print('Done.')
    return

if __name__ == '__main__':
    endpoint = 'https://intranet.hbtn.io/auth/sign_in'
    print('~~~ Holberton Project Setup ~~~')
    print('-' * 31)
    print('Attempting to reach intranet.hbtn.io...')
    sesh = requests.Session()
    response = sesh.get(endpoint)
    soup = BeautifulSoup(response.text, 'html.parser')
    token = get_token(soup)
    soup = login(endpoint, token, sesh)
    if soup:
        try:
            project = get(soup, 'project')[0]
        except TypeError:
            print('Invalid Project ID. Try again. Exiting')
            exit()
        github_repo = get(soup, 'github_repo')[0].split(': ')[1]
        try:
            '''This is for projects like AirBnB_clone that have a special
            directory, which is the github_repo'''
            directory = get(soup, 'directory')[0].split(': ')[1]
        except TypeError:
            directory = github_repo
        file_list = get(soup, 'files')
        files = get_files(file_list)
        assemble(project, directory, files)
        print('All files have been placed in {}'.format(directory))
        executable = input('Do you want files to be executable? (y/n) ')
        if executable.lower().startswith('y'):
            make_executable(directory)
        readme = input('Do you want a README? (y/n) ')
        if readme.lower().startswith(('y')):
            make_readme(directory)
        print('Project setup completed. Goodbye.')
